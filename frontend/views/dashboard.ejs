

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link rel="stylesheet" href="/output.css">
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css"/>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=JetBrains+Mono:wght@400;500;600&display=swap" rel="stylesheet">
  
  

  <script>
    
    tailwind.config = {
      theme: {
        extend: {
          fontFamily: {
            'sans': ['Inter', 'sans-serif'],
            'mono': ['JetBrains Mono', 'monospace'],
          },
          animation: {
            'gradient': 'gradient 8s linear infinite',
            'float': 'float 6s ease-in-out infinite',
            'pulse-ring': 'pulse-ring 2s infinite',
            'glow': 'glow 2s ease-in-out infinite alternate',
            'slide-up': 'slide-up 0.5s ease-out',
            'bounce-in': 'bounce-in 0.6s ease-out',
          },
          keyframes: {
            gradient: {
              '0%, 100%': { 'background-position': '0% 50%' },
              '50%': { 'background-position': '100% 50%' },
            },
            float: {
              '0%, 100%': { transform: 'translateY(0px)' },
              '50%': { transform: 'translateY(-20px)' },
            },
            'pulse-ring': {
              '0%': { transform: 'scale(0.33)', opacity: '1' },
              '80%, 100%': { transform: 'scale(2.33)', opacity: '0' },
            },
            glow: {
              '0%': { 'box-shadow': '0 0 20px rgba(59, 130, 246, 0.5)' },
              '100%': { 'box-shadow': '0 0 40px rgba(59, 130, 246, 0.8), 0 0 60px rgba(59, 130, 246, 0.4)' },
            },
            'slide-up': {
              '0%': { transform: 'translateY(100px)', opacity: '0' },
              '100%': { transform: 'translateY(0)', opacity: '1' },
            },
            'bounce-in': {
              '0%': { transform: 'scale(0.3)', opacity: '0' },
              '50%': { transform: 'scale(1.05)' },
              '70%': { transform: 'scale(0.9)' },
              '100%': { transform: 'scale(1)', opacity: '1' },
            },
          },
          backgroundImage: {
            'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
            'gradient-conic': 'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
          },
        }
      }
    }
  </script>
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background: linear-gradient(-45deg, #0f0f23, #1a1a2e, #16213e, #0f3460);
      background-size: 400% 400%;
      animation: gradient 15s ease infinite;
    }
    
    .glass-effect {
      background: rgba(255, 255, 255, 0.05);
      backdrop-filter: blur(20px);
      border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .neon-border {
      box-shadow: 0 0 20px rgba(59, 130, 246, 0.3), inset 0 0 20px rgba(59, 130, 246, 0.1);
    }
    
    .search-glow:focus {
      box-shadow: 0 0 30px rgba(34, 197, 94, 0.5), 0 0 60px rgba(34, 197, 94, 0.2);
    }
    
    .map-3d {
      transform-style: preserve-3d;
      transition: transform 0.3s ease;
    }
    
    .map-3d:hover {
      transform: perspective(1000px) rotateX(2deg) rotateY(2deg);
    }
    
    .floating-particles {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 1;
    }
    
    .particle {
      position: absolute;
      width: 2px;
      height: 2px;
      background: rgba(59, 130, 246, 0.6);
      border-radius: 50%;
      animation: float 8s infinite linear;
    }
    
    @keyframes float {
      0% {
        transform: translateY(100vh) rotate(0deg);
        opacity: 0;
      }
      10% {
        opacity: 1;
      }
      90% {
        opacity: 1;
      }
      100% {
        transform: translateY(-100px) rotate(360deg);
        opacity: 0;
      }
    }
    
    .voice-pulse {
      position: relative;
    }
    
    .voice-pulse::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 100%;
      height: 100%;
      border: 2px solid rgba(34, 197, 94, 0.6);
      border-radius: 50%;
      transform: translate(-50%, -50%);
      animation: pulse-ring 2s infinite;
    }
    
    .status-card {
      transition: all 0.3s ease;
    }
    
    .status-card:hover {
      transform: translateY(-5px) scale(1.02);
    }
  </style>
</head>
<body class="min-h-screen text-white overflow-x-hidden">
  <!-- Floating Particles -->
  <div class="floating-particles" id="particles"></div>
  
  <!-- Main Container -->
  <div class="relative z-10">
    <!-- Top Search Bar -->
    <div class="fixed top-0 left-0 right-0 z-50 glass-effect border-b border-white/10">
      <div class="max-w-7xl mx-auto px-4 py-4">
        <div class="flex items-center justify-between">
          <!-- Logo -->
          <div class="flex items-center space-x-3">
            <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl flex items-center justify-center">
              <span class="text-xl">🚀</span>
            </div>
            <h1 class="text-xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
              BUS TRACKER
            </h1>
            
          </div>
          
          <!-- Search Section -->
          <div class="flex-1 max-w-2xl mx-8">
            <div class="relative flex items-center space-x-3">
              <div class="relative flex-1">
                <input 
                  id="searchInput"
                  type="text" 
                  placeholder="🎯 Search destinations, landmarks, or bus stops..."
                  class="w-full px-6 py-3 bg-gray-900/50 border border-gray-700 rounded-2xl text-white placeholder-gray-400 focus:outline-none focus:border-green-500 search-glow transition-all duration-300"
                />
                <div class="absolute right-4 top-1/2 transform -translate-y-1/2">
                  <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                  </svg>
                </div>
              </div>
              
              <!-- Voice Button -->
              <button 
                id="voiceBtn" 
                class="voice-pulse px-6 py-3 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 rounded-2xl font-semibold transition-all duration-300 transform hover:scale-105 flex items-center space-x-2 shadow-lg"
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v3a3 3 0 01-3 3z"></path>
                </svg>
                <span class="hidden sm:inline">Speak</span>
              </button>
              
            </div>
            
            <!-- Quick Commands -->
            <div class="mt-2 flex flex-wrap gap-2">
              <button class="px-3 py-1 text-xs bg-gray-800/50 hover:bg-gray-700/50 rounded-full transition-colors duration-200">
                "Find nearest bus stop"
              </button>
              <button class="px-3 py-1 text-xs bg-gray-800/50 hover:bg-gray-700/50 rounded-full transition-colors duration-200">
                "Route to MG Road"
              </button>
              <button class="px-3 py-1 text-xs bg-gray-800/50 hover:bg-gray-700/50 rounded-full transition-colors duration-200">
                "Show bus timings"
              </button>
            </div>
          </div>
          
          <!-- Status Indicator -->
          <div class="flex items-center space-x-2">
            <div class="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
            <span class="text-sm font-medium text-green-400">LIVE</span>
            <button onclick="logout()" class="ml-8 px-4 py-2 bg-red-600 rounded-lg">Logout</button>
            
          </div>
        </div>
      </div>
    </div>
    
    <!-- Main Content -->
    <div class="pt-32 pb-8 px-4">
      <div class="max-w-7xl mx-auto">
        
        <!-- Hero Section -->
        <div class="text-center mb-12 animate-slide-up">
          <h2 class="text-5xl md:text-7xl font-black mb-4 bg-gradient-to-r from-blue-400 via-purple-500 to-pink-500 bg-clip-text text-transparent animate-glow">
            PUBLIC TRANSPORT TRACKER
          </h2>
          <p class="text-xl text-gray-300 mb-8 max-w-3xl mx-auto">
            Experience the future of public transportation with AI-powered real-time tracking, 
            voice commands, and intelligent route optimization.
          </p>
          
          <!-- Feature Badges -->
          <div class="flex flex-wrap justify-center gap-4 mb-8">
            <div class="px-6 py-3 bg-gradient-to-r from-blue-500/20 to-cyan-500/20 border border-blue-500/30 rounded-2xl backdrop-blur-sm">
              <span class="text-blue-300 font-semibold">⚡ Real-Time</span>
            </div>
            <div class="px-6 py-3 bg-gradient-to-r from-purple-500/20 to-pink-500/20 border border-purple-500/30 rounded-2xl backdrop-blur-sm">
              <span class="text-purple-300 font-semibold">🤖 AI Powered</span>
            </div>
            <div class="px-6 py-3 bg-gradient-to-r from-green-500/20 to-emerald-500/20 border border-green-500/30 rounded-2xl backdrop-blur-sm">
              <span class="text-green-300 font-semibold">🎤 Voice Enabled</span>
            </div>
          </div>
        </div>
        
        <!-- Stats Grid -->
        <div class="grid grid-cols-2 md:grid-cols-4 gap-6 mb-12">
          <div class="status-card glass-effect rounded-2xl p-6 text-center neon-border animate-bounce-in">
            <div class="text-3xl mb-2">🌐</div>
            <div class="text-2xl font-bold text-green-400 mb-1">ONLINE</div>
            <div class="text-sm text-gray-400">System Status</div>
          </div>
          <div class="status-card glass-effect rounded-2xl p-6 text-center neon-border animate-bounce-in" style="animation-delay: 0.1s">
            <div class="text-3xl mb-2">🚌</div>
            <div class="text-2xl font-bold text-blue-400 mb-1">156</div>
            <div class="text-sm text-gray-400">Active Buses</div>
          </div>
          <div class="status-card glass-effect rounded-2xl p-6 text-center neon-border animate-bounce-in" style="animation-delay: 0.2s">
            <div class="text-3xl mb-2">📍</div>
            <div class="text-2xl font-bold text-purple-400 mb-1">2,847</div>
            <div class="text-sm text-gray-400">Bus Stops</div>
          </div>
          <div class="status-card glass-effect rounded-2xl p-6 text-center neon-border animate-bounce-in" style="animation-delay: 0.3s">
            <div class="text-3xl mb-2">⚡</div>
            <div class="text-2xl font-bold text-yellow-400 mb-1">0.3s</div>
            <div class="text-sm text-gray-400">Response Time</div>
          </div>
        </div>
        
        <!-- Enhanced Map Section -->
        <div class="glass-effect rounded-3xl p-8 neon-border animate-slide-up">
          <div class="flex items-center justify-between mb-6">
            <div>
              <h3 class="text-3xl font-bold bg-gradient-to-r from-cyan-400 to-blue-500 bg-clip-text text-transparent mb-2">
                🗺️ Interactive Transport Map
              </h3>
              <p class="text-gray-400">Real-time bus locations and route visualization</p>
            </div>
            
            <!-- Map Controls -->
            <div class="flex items-center space-x-4">
              <button class="px-4 py-2 bg-gray-800/50 hover:bg-gray-700/50 rounded-xl transition-colors duration-200 flex items-center space-x-2">
                <span class="w-3 h-3 bg-orange-400 rounded-full"></span>
                <span class="text-sm">Buses</span>
              </button>
              <button class="px-4 py-2 bg-gray-800/50 hover:bg-gray-700/50 rounded-xl transition-colors duration-200 flex items-center space-x-2">
                <span class="w-3 h-3 bg-green-400 rounded-full"></span>
                <span class="text-sm">Stops</span>
              </button>
              <button class="px-4 py-2 bg-gray-800/50 hover:bg-gray-700/50 rounded-xl transition-colors duration-200 flex items-center space-x-2">
                <span class="w-3 h-3 bg-blue-400 rounded-full"></span>
                <span class="text-sm">Routes</span>
              </button>
            </div>
          </div>
          
          <!-- Map Container with 3D Effect -->
          <div class="map-3d rounded-2xl overflow-hidden border-2 border-gray-700/50 shadow-2xl">
            <div id="map" class="h-96 md:h-[600px] w-full"></div>
          </div>
          
          <!-- Map Info Panel -->
          <div class="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="glass-effect rounded-xl p-4 border border-gray-700/50">
              <div class="flex items-center space-x-3">
                <div class="w-10 h-10 bg-gradient-to-r from-green-500 to-emerald-600 rounded-lg flex items-center justify-center">
                  <span class="text-white font-bold">12</span>
                </div>
                <div>
                  <div class="font-semibold text-green-400">Buses Nearby</div>
                  <div class="text-sm text-gray-400">Within 2km radius</div>
                </div>
              </div>
            </div>
            
            <div class="glass-effect rounded-xl p-4 border border-gray-700/50">
              <div class="flex items-center space-x-3">
                <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-cyan-600 rounded-lg flex items-center justify-center">
                  <span class="text-white font-bold">8</span>
                </div>
                <div>
                  <div class="font-semibold text-blue-400">Active Routes</div>
                  <div class="text-sm text-gray-400">Currently running</div>
                </div>
              </div>
            </div>
            
            <div class="glass-effect rounded-xl p-4 border border-gray-700/50">
              <div class="flex items-center space-x-3">
                <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-600 rounded-lg flex items-center justify-center">
                  <span class="text-white font-bold">3</span>
                </div>
                <div>
                  <div class="font-semibold text-purple-400">Avg Wait Time</div>
                  <div class="text-sm text-gray-400">Minutes</div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Footer -->
        <footer class="text-center mt-12 text-gray-500">
          <div class="glass-effect rounded-2xl p-6 border border-gray-700/30">
            <p class="mb-2">© 2024 Bus Tracker Dashboard | | </p>
            <div class="flex justify-center space-x-6 text-sm">
              <a href="#" class="hover:text-blue-400 transition-colors duration-200">Privacy Policy</a>
              <a href="#" class="hover:text-blue-400 transition-colors duration-200">Terms of Service</a>
              <a href="#" class="hover:text-blue-400 transition-colors duration-200">Support</a>
            </div>
          </div>
        </footer>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50 opacity-0 invisible transition-all duration-300">
    <div class="text-center">
      <div class="w-16 h-16 border-4 border-gray-600 border-t-blue-500 rounded-full animate-spin mb-4"></div>
      <p class="text-white font-semibold">Searching location...</p>
    </div>
  </div>

  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script>
  document.body.style.display = "none";

async function checkAuth() {
  try {
    const res = await fetch("/api/auth/verify-cookie");
    const data = await res.json();

    if (res.ok && data.valid) {
      console.log("✅ User verified:", data.user);
      document.body.style.display = "block";
    } else {
      console.log("❌ Not logged in, redirecting...");
      window.location.href = "/login";
    }
  } catch (err) {
    console.error("Auth check failed:", err);
    window.location.href = "/login";
  }
}

function logout() {
  fetch("/api/auth/logout", { method: "POST" }).then(() => {
    window.location.href = "/login";
  });
}

checkAuth();

    // Create floating particles
    function createParticles() {
      const particlesContainer = document.getElementById('particles');
      const particleCount = 30;
      
      for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        particle.style.left = Math.random() * 100 + '%';
        particle.style.animationDelay = Math.random() * 8 + 's';
        particle.style.animationDuration = (Math.random() * 4 + 6) + 's';
        particlesContainer.appendChild(particle);
      }
    }
    
    createParticles();
    
    // Loading functions
    function showLoading() {
      document.getElementById('loadingOverlay').classList.remove('opacity-0', 'invisible');
    }
    
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.add('opacity-0', 'invisible');
    }

    // Initialize enhanced map
    const map = L.map('map', {
      zoomControl: false,
      attributionControl: false
    }).setView([12.9716, 77.5946], 13);

    // Add custom zoom control
    L.control.zoom({
      position: 'topright'
    }).addTo(map);

    // Dark theme map tiles
    L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
      subdomains: 'abcd',
      maxZoom: 19
    }).addTo(map);

    // Enhanced custom markers
    const createCustomMarker = (color, icon, size = 'normal') => {
      const sizeMap = {
        small: { width: 25, height: 25, fontSize: '12px' },
        normal: { width: 35, height: 35, fontSize: '16px' },
        large: { width: 45, height: 45, fontSize: '20px' }
      };
      
      const { width, height, fontSize } = sizeMap[size];
      
      return L.divIcon({
        className: 'custom-marker',
        html: `
          <div style="
            background: linear-gradient(135deg, ${color}, ${color}dd);
            width: ${width}px;
            height: ${height}px;
            border-radius: 50%;
            border: 3px solid white;
            box-shadow: 0 0 25px ${color}66, 0 6px 20px rgba(0,0,0,0.4);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: ${fontSize};
            animation: bounce 3s infinite ease-in-out;
            position: relative;
          ">${icon}
            <div style="
              position: absolute;
              top: 50%;
              left: 50%;
              width: 100%;
              height: 100%;
              border: 2px solid ${color};
              border-radius: 50%;
              transform: translate(-50%, -50%);
              animation: pulse-ring 2s infinite;
            "></div>
          </div>
          <style>
            @keyframes bounce {
              0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
              40% { transform: translateY(-8px); }
              60% { transform: translateY(-4px); }
            }
            @keyframes pulse-ring {
              0% { transform: translate(-50%, -50%) scale(1); opacity: 1; }
              100% { transform: translate(-50%, -50%) scale(2); opacity: 0; }
            }
          </style>
        `,
        iconSize: [width, height],
        iconAnchor: [width/2, height/2]
      });
    };

    // Enhanced search function
    async function searchLocation(query) {
      if (!query.trim()) return;
      
      showLoading();
      const searchInput = document.getElementById("searchInput");
      const originalPlaceholder = searchInput.placeholder;
      
      try {
        const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`;
        const res = await fetch(url);
        const data = await res.json();
        
        if (data.length > 0) {
          const lat = parseFloat(data[0].lat);
          const lon = parseFloat(data[0].lon);
          const displayName = data[0].display_name;
          
          // Smooth fly-to animation
          map.flyTo([lat, lon], 16, {
            animate: true,
            duration: 2.5,
            easeLinearity: 0.1
          });
          
          // Add enhanced marker
          const marker = L.marker([lat, lon], { 
            icon: createCustomMarker('#10b981', '🎯', 'large') 
          }).addTo(map);
          
          // Enhanced popup
          marker.bindPopup(`
            <div style="
              background: linear-gradient(135deg, #1f2937, #374151);
              color: white;
              padding: 20px;
              border-radius: 15px;
              border: 2px solid #10b981;
              box-shadow: 0 0 30px rgba(16, 185, 129, 0.4);
              text-align: center;
              min-width: 250px;
              font-family: 'Inter', sans-serif;
            ">
              <h3 style="margin: 0 0 15px 0; color: #10b981; font-weight: bold; font-size: 18px;">🎯 DESTINATION FOUND</h3>
              <p style="margin: 0 0 15px 0; font-size: 14px; color: #d1d5db; line-height: 1.4;">${displayName}</p>
              <div style="margin-top: 15px; padding-top: 15px; border-top: 1px solid #4b5563;">
                <span style="color: #10b981; font-size: 14px; font-weight: 600;">✅ LOCATION VERIFIED</span>
              </div>
            </div>
          `).openPopup();
          
          // Success feedback
          searchInput.classList.add('border-green-500');
          searchInput.classList.remove('border-gray-700');
          
        } else {
          // Error feedback
          searchInput.classList.add('border-red-500');
          searchInput.classList.remove('border-gray-700');
          searchInput.placeholder = "❌ Location not found - try again";
        }
      } catch (error) {
        console.error("Search error:", error);
        searchInput.classList.add('border-red-500');
        searchInput.placeholder = "⚠️ Connection error - please retry";
      } finally {
        hideLoading();
        setTimeout(() => {
          searchInput.classList.remove('border-green-500', 'border-red-500');
          searchInput.classList.add('border-gray-700');
          if (searchInput.placeholder !== originalPlaceholder) {
            searchInput.placeholder = originalPlaceholder;
          }
        }, 3000);
      }
    }

    // Search event listeners
    document.getElementById("searchInput").addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        searchLocation(e.target.value);
      }
    });

    // Enhanced voice search
    const voiceBtn = document.getElementById("voiceBtn");
    const searchInput = document.getElementById("searchInput");

    voiceBtn.addEventListener("click", () => {
      if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
        alert("🎤 Voice search requires Chrome or Edge browser");
        return;
      }
      
      const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
      recognition.lang = "en-IN";
      
      // Listening state
      voiceBtn.innerHTML = `
        <svg class="w-5 h-5 animate-pulse" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12 14c1.66 0 2.99-1.34 2.99-3L15 5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3zm5.3-3c0 3-2.54 5.1-5.3 5.1S6.7 14 6.7 11H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c3.28-.48 6-3.3 6-6.72h-1.7z"/>
        </svg>
        <span class="hidden sm:inline">Listening...</span>
      `;
      voiceBtn.classList.add('bg-red-500', 'hover:bg-red-600');
      voiceBtn.classList.remove('bg-gradient-to-r', 'from-green-500', 'to-emerald-600');
      
      recognition.start();

      recognition.onresult = (event) => {
        const speechText = event.results[0][0].transcript;
        searchInput.value = speechText;
        searchLocation(speechText);
        resetVoiceButton();
      };
      
      recognition.onerror = () => {
        alert("🎤 Voice recognition failed. Please check microphone permissions.");
        resetVoiceButton();
      };
      
      recognition.onend = resetVoiceButton;
      
      function resetVoiceButton() {
        voiceBtn.innerHTML = `
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v3a3 3 0 01-3 3z"></path>
          </svg>
          <span class="hidden sm:inline">Speak</span>
        `;
        voiceBtn.classList.remove('bg-red-500', 'hover:bg-red-600');
        voiceBtn.classList.add('bg-gradient-to-r', 'from-green-500', 'to-emerald-600');
      }
    });

    // Add sample locations with enhanced markers
    const sampleLocations = [
      { lat: 12.9716, lng: 77.5946, name: "Bangalore Central", type: "station", icon: "🚉", color: "#3b82f6" },
      { lat: 12.9698, lng: 77.6000, name: "MG Road", type: "stop", icon: "🚏", color: "#10b981" },
      { lat: 12.9800, lng: 77.5900, name: "Cubbon Park", type: "landmark", icon: "🌳", color: "#8b5cf6" },
      { lat: 12.9650, lng: 77.6050, name: "Brigade Road", type: "stop", icon: "🚏", color: "#10b981" },
      { lat: 12.9750, lng: 77.5850, name: "Vidhana Soudha", type: "landmark", icon: "🏛️", color: "#8b5cf6" }
    ];

    sampleLocations.forEach((location, index) => {
      setTimeout(() => {
        const marker = L.marker([location.lat, location.lng], { 
          icon: createCustomMarker(location.color, location.icon)
        }).addTo(map);
        
        marker.bindPopup(`
          <div style="
            background: linear-gradient(135deg, #1f2937, #374151);
            color: white;
            padding: 15px;
            border-radius: 12px;
            border: 2px solid ${location.color};
            text-align: center;
            font-family: 'Inter', sans-serif;
          ">
            <h4 style="margin: 0 0 8px 0; color: ${location.color}; font-weight: bold;">${location.icon} ${location.name}</h4>
            <p style="margin: 0; font-size: 12px; color: #d1d5db; text-transform: uppercase; letter-spacing: 1px;">${location.type}</p>
          </div>
        `);
      }, index * 300);
    });

    // Enhanced bus animations
    function animateBuses() {
      const busRoutes = [
        { 
          route: [[12.9716, 77.5946], [12.9698, 77.6000], [12.9650, 77.6050]], 
          color: '#f59e0b',
          id: 'Route 42A'
        },
        { 
          route: [[12.9800, 77.5900], [12.9750, 77.5850], [12.9716, 77.5946]], 
          color: '#ef4444',
          id: 'Route 15B'
        }
      ];
      
      busRoutes.forEach((busRoute, routeIndex) => {
        let currentStop = 0;
        const busMarker = L.marker(busRoute.route[0], {
          icon: createCustomMarker(busRoute.color, '🚌', 'normal')
        }).addTo(map);
        
        busMarker.bindPopup(`
          <div style="
            background: linear-gradient(135deg, #1f2937, #374151);
            color: white;
            padding: 15px;
            border-radius: 12px;
            border: 2px solid ${busRoute.color};
            text-align: center;
            font-family: 'Inter', sans-serif;
          ">
            <h4 style="margin: 0 0 8px 0; color: ${busRoute.color}; font-weight: bold;">🚌 ${busRoute.id}</h4>
            <p style="margin: 0; font-size: 12px; color: #d1d5db;">Currently in transit</p>
            <div style="margin-top: 10px; padding-top: 10px; border-top: 1px solid #4b5563;">
              <span style="color: #10b981; font-size: 12px;">🟢 ON TIME</span>
            </div>
          </div>
        `);
        
        function moveBus() {
          currentStop = (currentStop + 1) % busRoute.route.length;
          busMarker.setLatLng(busRoute.route[currentStop]);
          setTimeout(moveBus, 4000 + routeIndex * 1000);
        }
        
        setTimeout(moveBus, 2000 + routeIndex * 1500);
      });
    }
    
    // Start animations after map loads
    setTimeout(animateBuses, 1500);
    
    // Quick command buttons
    document.querySelectorAll('button[class*="px-3 py-1"]').forEach(button => {
      button.addEventListener('click', () => {
        const command = button.textContent.replace(/"/g, '');
        searchInput.value = command;
        searchLocation(command);
      });
    });
  </script>
</body>
</html>